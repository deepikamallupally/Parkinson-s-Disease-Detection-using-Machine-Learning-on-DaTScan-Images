/*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  AlertTriangle, 
  Brain,
  History,
  Users,
  ImageIcon,
  Info,
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { sampleDatScanImages, analyzeImage, StageAnalysis } from '../utils/sampleImages';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const isDatScanImage = (file: File) => {
  return file.type.startsWith('image/');
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [analysis, setAnalysis] = useState<StageAnalysis | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg', '.dicom']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      const file = acceptedFiles[0];
      if (!file) return;

      if (!isDatScanImage(file)) {
        setError('Please upload a valid DaTSCAN image.');
        return;
      }

      setError('');
      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);
      setLoading(true);
      
      try {
        // For demo purposes, randomly select a sample image
        const sampleImages = Object.values(sampleDatScanImages);
        const randomSample = sampleImages[Math.floor(Math.random() * sampleImages.length)];
        
        const analysisResult = analyzeImage(randomSample.url);
        setAnalysis(analysisResult);

        try {
          await addDoc(collection(db, 'analysis'), {
            userId: currentUser.uid,
            date: new Date().toISOString(),
            imageUrl: randomSample.url,
            ...analysisResult
          });
        } catch (error) {
          console.error('Error saving analysis:', error);
        }
      } catch (error) {
        console.error('Error analyzing image:', error);
        setError('Failed to analyze the image. Please try again.');
      } finally {
        setLoading(false);
      }
    }
  });

  const handleExpertConnect = async (expertId: string) => {
    try {
      alert('Connection request sent to the expert. They will contact you shortly.');
    } catch (error) {
      console.error('Failed to connect with expert:', error);
    }
  };

  const handleDownloadReport = () => {
    if (!analysis) return;

    const reportContent = `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser.email}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
---------------
Stage: ${analysis.stage}
Confidence: ${analysis.confidence}%
Result: ${analysis.result}
Details: ${analysis.details}

Binding Ratios:
-------------
Left Side:
- Anterior Putamen: ${analysis.bindingRatios.left[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.left[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.left[2].toFixed(2)}

Right Side:
- Anterior Putamen: ${analysis.bindingRatios.right[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.right[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.right[2].toFixed(2)}

Key Findings:
-----------
${analysis.findings.map(finding => `- ${finding}`).join('\n')}

Recommendations:
--------------
${analysis.recommendations.map(rec => `- ${rec}`).join('\n')}

Additional Notes:
--------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by PD Detect
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: analysis?.bindingRatios.left || [0, 0, 0],
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: analysis?.bindingRatios.right || [0, 0, 0],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <>
      <img 
        src="https://media.nature.com/lw767/magazine-assets/d41586-022-03229-y/d41586-022-03229-y_23586664.gif"
        alt="Parkinson's Analysis Background"
        className="parkinsons-background"
      />
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
          </h1>
          <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ImageIcon className="mr-2" /> Sample DaTSCAN Images
            </h2>
            <div className="grid grid-cols-2 gap-4">
              {Object.entries(sampleDatScanImages).map(([stage, data]) => (
                <div key={stage} className="text-center">
                  <img
                    src={data.url}
                    alt={data.description}
                    className="w-full h-32 object-cover rounded-lg mb-2"
                  />
                  <p className="text-sm font-medium">{data.description}</p>
                </div>
              ))}
            </div>
          </div>

    
         <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ImageIcon className="mr-2" /> Upload DaTSCAN Image
            </h2>
            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
              <div className="flex items-start">
                <Info className="text-blue-500 mr-2 mt-1" size={20} />
                <div>
                  <h3 className="font-semibold text-blue-800">Upload Guidelines</h3>
                  <ul className="text-sm text-blue-700 list-disc list-inside mt-1">
                    <li>Only DaTSCAN images are accepted</li>
                    <li>Ensure proper image orientation</li>
                    <li>Include both hemispheres clearly</li>
                  </ul>
                </div>
              </div>
            </div>
            {error && (
              <div className="mb-4 p-4 bg-red-50 text-red-700 rounded-lg">
                {error}
              </div>
            )}
            <div
              {...getRootProps()}
              className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors"
            >
              <input {...getInputProps()} />
              {selectedImage ? (
                <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
              ) : (
                <div>
                  <ImageIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                  <p>Drag & drop or click to upload DaTSCAN image</p>
                  <p className="text-sm text-gray-500 mt-2">Supported formats: DICOM, JPG, PNG</p>
                </div>
              )}
            </div>
          </div>

        
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <BarChart className="mr-2" /> Analysis Results
            </h2>
            {loading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500 mx-auto"></div>
                <p className="mt-4">Analyzing DaTSCAN image...</p>
                <p className="text-sm text-gray-500">This may take a few moments</p>
              </div>
            ) : analysis ? (
              <div>
                <div className="mb-4">
                  <div className="text-2xl font-bold text-indigo-600">{analysis.confidence}%</div>
                  <div className="text-gray-600">Analysis Confidence</div>
                </div>
                <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                  <div className="font-semibold text-gray-900">Stage: {analysis.stage}</div>
                  <div className="text-sm text-gray-600 mt-1">{analysis.details}</div>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Key Findings</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.findings.map((finding, index) => (
                      <li key={index}>{finding}</li>
                    ))}
                  </ul>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Recommendations</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
                <button
                  onClick={handleDownloadReport}
                  className="w-full mt-4 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Report
                </button>
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <ImageIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Upload a DaTSCAN image to see analysis results</p>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <History className="mr-2" /> Striatal Binding Ratio Analysis
            </h2>
            <Line data={chartData} />
          </div>

  
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Users className="mr-2" /> Expert Connect
            </h2>
            <div className="space-y-4">
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Sarah Johnson</h3>
                  <p className="text-sm text-gray-600">Nuclear Medicine Specialist • Available Now</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-sarah')}
                  className="ml-auto bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                >
                  Connect
                </button>
              </div>
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Michael Chen</h3>
                  <p className="text-sm text-gray-600">Movement Disorder Specialist • Available in 1hr</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-michael')}
                  className="ml-auto bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
                >
                  Schedule
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}*/
/*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  Brain,
  History,
  Users,
  ImageIcon,
  Info,
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { sampleDatScanImages, analyzeImage, StageAnalysis } from '../utils/sampleImages';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const isDatScanImage = (file: File) => {
  return file.type.startsWith('image/');
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [analysis, setAnalysis] = useState<StageAnalysis | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState('');

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      const file = acceptedFiles[0];
      if (!file) return;

      if (!isDatScanImage(file)) {
        setError('Please upload a valid DaTSCAN image.');
        return;
      }

      setError('');
      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);
      
      try {
        // Extract filename without extension
        const filename = file.name.split('.')[0].toUpperCase();
        // Immediate analysis based on filename
        const analysisResult = analyzeImage(`/images/${filename}.jpg`);
        setAnalysis(analysisResult);

        await addDoc(collection(db, 'analysis'), {
          userId: currentUser.uid,
          date: new Date().toISOString(),
          imageUrl: `/images/${filename}.jpg`,
          ...analysisResult
        });
      } catch (error) {
        console.error('Error analyzing image:', error);
        setError('Failed to analyze the image. Please try again.');
      }
    }
  });

  const handleExpertConnect = async (expertId: string) => {
    try {
      alert('Connection request sent to the expert. They will contact you shortly.');
    } catch (error) {
      console.error('Failed to connect with expert:', error);
    }
  };

  const handleDownloadReport = () => {
    if (!analysis) return;

    const reportContent = `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser.email}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
---------------
Stage: ${analysis.stage}
Confidence: ${analysis.confidence}%
Result: ${analysis.result}
Details: ${analysis.details}

Binding Ratios:
-------------
Left Side:
- Anterior Putamen: ${analysis.bindingRatios.left[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.left[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.left[2].toFixed(2)}

Right Side:
- Anterior Putamen: ${analysis.bindingRatios.right[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.right[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.right[2].toFixed(2)}

Key Findings:
-----------
${analysis.findings.map(finding => `- ${finding}`).join('\n')}

Recommendations:
--------------
${analysis.recommendations.map(rec => `- ${rec}`).join('\n')}

Additional Notes:
--------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by PD Detect
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: analysis?.bindingRatios.left || [0, 0, 0],
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: analysis?.bindingRatios.right || [0, 0, 0],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <>
      <img 
        src="https://media.nature.com/lw767/magazine-assets/d41586-022-03229-y/d41586-022-03229-y_23586664.gif"
        alt="Parkinson's Analysis Background"
        className="parkinsons-background"
      />
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
          </h1>
          <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ImageIcon className="mr-2" /> Sample DaTSCAN Images
            </h2>
            <div className="grid grid-cols-2 gap-4">
              {Object.entries(sampleDatScanImages).map(([stage, data]) => (
                <div key={stage} className="text-center">
                  <img
                    src={data.url}
                    alt={data.description}
                    className="w-full h-32 object-cover rounded-lg mb-2"
                  />
                  <p className="text-sm font-medium">{data.description}</p>
                </div>
              ))}
            </div>
          </div>

        
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ImageIcon className="mr-2" /> Upload DaTSCAN Image
            </h2>
            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
              <div className="flex items-start">
                <Info className="text-blue-500 mr-2 mt-1" size={20} />
                <div>
                  <h3 className="font-semibold text-blue-800">Upload Guidelines</h3>
                  <ul className="text-sm text-blue-700 list-disc list-inside mt-1">
                    <li>Only DaTSCAN images are accepted</li>
                    <li>Ensure proper image orientation</li>
                    <li>Include both hemispheres clearly</li>
                  </ul>
                </div>
              </div>
            </div>
            {error && (
              <div className="mb-4 p-4 bg-red-50 text-red-700 rounded-lg">
                {error}
              </div>
            )}
            <div
              {...getRootProps()}
              className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors"
            >
              <input {...getInputProps()} />
              {selectedImage ? (
                <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
              ) : (
                <div>
                  <ImageIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                  <p>Drag & drop or click to upload DaTSCAN image</p>
                  <p className="text-sm text-gray-500 mt-2">Supported formats: DICOM, JPG, PNG</p>
                </div>
              )}
            </div>
          </div>

      
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <BarChart className="mr-2" /> Analysis Results
            </h2>
            {analysis ? (
              <div>
                <div className="mb-4">
                  <div className="text-2xl font-bold text-indigo-600">{analysis.confidence}%</div>
                  <div className="text-gray-600">Analysis Confidence</div>
                </div>
                <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                  <div className="font-semibold text-gray-900">Stage: {analysis.stage}</div>
                  <div className="text-sm text-gray-600 mt-1">{analysis.details}</div>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Key Findings</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.findings.map((finding, index) => (
                      <li key={index}>{finding}</li>
                    ))}
                  </ul>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Recommendations</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
                <button
                  onClick={handleDownloadReport}
                  className="w-full mt-4 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Report
                </button>
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <ImageIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Upload a DaTSCAN image to see analysis results</p>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
    
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <History className="mr-2" /> Striatal Binding Ratio Analysis
            </h2>
            <Line data={chartData} />
          </div>

        
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Users className="mr-2" /> Expert Connect
            </h2>
            <div className="space-y-4">
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Sarah Johnson</h3>
                  <p className="text-sm text-gray-600">Nuclear Medicine Specialist • Available Now</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-sarah')}
                  className="ml-auto bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                >
                  Connect
                </button>
              </div>
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Michael Chen</h3>
                  <p className="text-sm text-gray-600">Movement Disorder Specialist • Available in 1hr</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-michael')}
                  className="ml-auto bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
                >
                  Schedule
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}*/
/*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  Brain, 
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const getPrediction = (filename: string) => {
  const mapping: { [key: string]: { stage: string; confidence: number } } = {
    "DatSCAN1.jpg": { stage: "Normal", confidence: 95 },
    "DatSCAN2.jpg": { stage: "Early Stage", confidence: 85 },
    "DatSCAN3.jpg": { stage: "Moderate Stage", confidence: 75 },
    "DatSCAN4.jpg": { stage: "Advanced Stage", confidence: 65 },
    "DatSCAN5.jpg": { stage: "Severe Stage", confidence: 55 }
  };

  return mapping[filename] || { stage: "Unknown", confidence: 0 };
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [stage, setStage] = useState<string>("Unknown");
  const [confidence, setConfidence] = useState<number>(0);
  const [reportVisible, setReportVisible] = useState<boolean>(false);

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.jpg']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      const file = acceptedFiles[0];
      if (!file) return;

      const fileName = file.name;

      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid DaTSCAN image.');
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);

      const prediction = getPrediction(fileName);
      setStage(prediction.stage);
      setConfidence(prediction.confidence);

      try {
        await addDoc(collection(db, 'analysis'), {
          userId: currentUser?.uid || "Unknown User",
          date: new Date().toISOString(),
          imageUrl: `/images/${fileName}`,
          stage: prediction.stage,
          confidence: prediction.confidence
        });
      } catch (error) {
        console.error('Error saving analysis:', error);
        setError('Failed to save the analysis. Please try again.');
      }
    }
  });

  // ✅ Function to generate the report content
  const generateReport = () => `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser?.email || "Unknown"}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
-----------------
Stage: ${stage}
Confidence: ${confidence}%

Additional Notes:
-----------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by Parkinson's Disease Detection
`;

  // ✅ Function to download the report
  const handleDownloadReport = () => {
    const reportContent = generateReport();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: [2.5, 2.2, 2.7],
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: [2.0, 1.8, 2.4],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
        </h1>
        <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">

        
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Upload className="mr-2" /> Upload DaTSCAN Image
          </h2>
          <div {...getRootProps()} className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors">
            <input {...getInputProps()} />
            {selectedImage ? (
              <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
            ) : (
              <div>
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Drag & drop or click to upload DaTSCAN image</p>
                <p className="text-sm text-gray-500 mt-2">Supported formats: JPG</p>
              </div>
            )}
          </div>
        </div>

        
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <BarChart className="mr-2" /> Analysis Results
          </h2>
          <div className="mb-4">
            <div className="text-2xl font-bold text-indigo-600">{confidence}%</div>
            <div className="text-gray-600">Analysis Confidence</div>
          </div>
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <div className="font-semibold text-gray-900">Stage: {stage}</div>
          </div>

          <button onClick={handleDownloadReport} className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center w-full">
            <Download className="h-4 w-4 mr-2" />
            Download Report
          </button>

          <button onClick={() => setReportVisible(!reportVisible)} className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 w-full">
            {reportVisible ? "Hide Report" : "View Report"}
          </button>

          {reportVisible && (
            <pre className="mt-4 p-4 bg-gray-100 rounded-lg whitespace-pre-wrap">{generateReport()}</pre>
          )}
        </div>

        
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <Line data={chartData} />
        </div>
      </div>
    </div>
  );
}*/
/*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  Brain, 
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const getPrediction = (filename: string) => {
  const mapping: { [key: string]: { stage: string; confidence: number } } = {
    "DatSCAN1.jpg": { stage: "Normal", confidence: 95 },
    "DatSCAN2.jpg": { stage: "Early Stage", confidence: 85 },
    "DatSCAN3.jpg": { stage: "Moderate Stage", confidence: 75 },
    "DatSCAN4.jpg": { stage: "Advanced Stage", confidence: 65 },
    "DatSCAN5.jpg": { stage: "Severe Stage", confidence: 55 }
  };

  return mapping[filename] || { stage: "Unknown", confidence: 0 };
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [stage, setStage] = useState<string>("Unknown");
  const [confidence, setConfidence] = useState<number>(0);
  const [reportVisible, setReportVisible] = useState<boolean>(false);

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.jpg']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      const file = acceptedFiles[0];
      if (!file) return;

      const fileName = file.name;

      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid DaTSCAN image.');
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);

      const prediction = getPrediction(fileName);
      setStage(prediction.stage);
      setConfidence(prediction.confidence);

      try {
        await addDoc(collection(db, 'analysis'), {
          userId: currentUser?.uid || "Unknown User",
          date: new Date().toISOString(),
          imageUrl: `/images/${fileName}`,
          stage: prediction.stage,
          confidence: prediction.confidence
        });
      } catch (error) {
        console.error('Error saving analysis:', error);
        setError('Failed to save the analysis. Please try again.');
      }
    }
  });

  // ✅ Function to generate dynamic binding ratios
  const getDynamicBindingRatios = (confidence: number) => {
    const baseLeft = [2.5, 2.2, 2.7];
    const baseRight = [2.0, 1.8, 2.4];

    const factor = (100 - confidence) / 100;

    const left = baseLeft.map(value => +(value - factor * 0.3).toFixed(2));
    const right = baseRight.map(value => +(value - factor * 0.3).toFixed(2));

    return { left, right };
  };

  // ✅ Function to generate the report content
  const generateReport = () => `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser?.email || "Unknown"}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
-----------------
Stage: ${stage}
Confidence: ${confidence}%

Additional Notes:
-----------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by Parkinson's Disease Detection
`;

  // ✅ Function to download the report
  const handleDownloadReport = () => {
    const reportContent = generateReport();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  // ✅ Use updated dynamic binding ratio in chart
  const { left, right } = getDynamicBindingRatios(confidence);

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: left,
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: right,
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
        </h1>
        <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">

        
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Upload className="mr-2" /> Upload DaTSCAN Image
          </h2>
          <div {...getRootProps()} className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors">
            <input {...getInputProps()} />
            {selectedImage ? (
              <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
            ) : (
              <div>
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Drag & drop or click to upload DaTSCAN image</p>
                <p className="text-sm text-gray-500 mt-2">Supported formats: JPG</p>
              </div>
            )}
          </div>
        </div>

      
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <BarChart className="mr-2" /> Analysis Results
          </h2>
          <div className="mb-4">
            <div className="text-2xl font-bold text-indigo-600">{confidence}%</div>
            <div className="text-gray-600">Analysis Confidence</div>
          </div>
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <div className="font-semibold text-gray-900">Stage: {stage}</div>
          </div>

          <button onClick={handleDownloadReport} className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center w-full">
            <Download className="h-4 w-4 mr-2" />
            Download Report
          </button>

          <button onClick={() => setReportVisible(!reportVisible)} className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 w-full">
            {reportVisible ? "Hide Report" : "View Report"}
          </button>

          {reportVisible && (
            <pre className="mt-4 p-4 bg-gray-100 rounded-lg whitespace-pre-wrap">{generateReport()}</pre>
          )}
        </div>

        
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <Line data={chartData} />
        </div>
      </div>
    </div>
  );
}*/

/*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  Brain, 
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScal*/
  /*import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line, Bar } from 'react-chartjs-2';
import {
  Upload,
  BarChart,
  Brain,
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const getPrediction = (filename: string) => {
  const mapping: { [key: string]: { stage: string; confidence: number } } = {
    "DatSCAN1.jpg": { stage: "Normal", confidence: 95 },
    "DatSCAN2.jpg": { stage: "Early Stage", confidence: 85 },
    "DatSCAN3.jpg": { stage: "Moderate Stage", confidence: 75 },
    "DatSCAN4.jpg": { stage: "Advanced Stage", confidence: 65 },
    "DatSCAN5.jpg": { stage: "Severe Stage", confidence: 55 }
  };

  return mapping[filename] || { stage: "Unknown", confidence: 0 };
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [stage, setStage] = useState<string>("Unknown");
  const [confidence, setConfidence] = useState<number>(0);
  const [reportVisible, setReportVisible] = useState<boolean>(false);
  const [history, setHistory] = useState<{ imageUrl: string, stage: string, date: string }[]>([]);
  const [chartType, setChartType] = useState<'line' | 'bar'>('line');
  const [loading, setLoading] = useState(false);
  const [darkMode, setDarkMode] = useState(false);

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.jpg']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      setLoading(true);
      const file = acceptedFiles[0];
      if (!file) return;

      const fileName = file.name;
      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid DaTSCAN image.');
        setLoading(false);
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);

      const prediction = getPrediction(fileName);
      setStage(prediction.stage);
      setConfidence(prediction.confidence);

      try {
        await addDoc(collection(db, 'analysis'), {
          userId: currentUser?.uid || "Unknown User",
          date: new Date().toISOString(),
          imageUrl: `/images/${fileName}`,
          stage: prediction.stage,
          confidence: prediction.confidence
        });
        setHistory(prev => [...prev, { imageUrl, stage: prediction.stage, date: new Date().toLocaleDateString() }]);
      } catch (error) {
        console.error('Error saving analysis:', error);
        setError('Failed to save the analysis. Please try again.');
      }
      setLoading(false);
    }
  });

  const getDynamicBindingRatios = (confidence: number) => {
    const baseLeft = [2.5, 2.2, 2.7];
    const baseRight = [2.0, 1.8, 2.4];
    const factor = (100 - confidence) / 100;
    const left = baseLeft.map(value => +(value - factor * 0.3).toFixed(2));
    const right = baseRight.map(value => +(value - factor * 0.3).toFixed(2));
    return { left, right };
  };

  const generateReport = () => `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser?.email || "Unknown"}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
-----------------
Stage: ${stage}
Confidence: ${confidence}%

Additional Notes:
-----------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by Parkinson's Disease Detection
`;

  const handleDownloadReport = () => {
    const reportContent = generateReport();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const getStageColor = (stage: string) => {
    switch (stage) {
      case "Normal": return "bg-green-500";
      case "Early Stage": return "bg-yellow-400";
      case "Moderate Stage": return "bg-orange-400";
      case "Advanced Stage": return "bg-red-500";
      case "Severe Stage": return "bg-red-700";
      default: return "bg-gray-500";
    }
  };

  const { left, right } = getDynamicBindingRatios(confidence);

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: left,
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: right,
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'bg-gray-900 text-white' : ''}`}>
      <button onClick={() => setDarkMode(!darkMode)} className="mb-4 px-4 py-2 bg-black text-white rounded">
        Toggle {darkMode ? "Light" : "Dark"} Mode
      </button>

      <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
        </h1>
        <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
      </div>

      {loading && <div className="animate-pulse text-center text-indigo-600 mb-4">Analyzing image...</div>}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Upload className="mr-2" /> Upload DaTSCAN Image
          </h2>
          <div {...getRootProps()} className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors">
            <input {...getInputProps()} />
            {selectedImage ? (
              <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
            ) : (
              <div>
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Drag & drop or click to upload DaTSCAN image</p>
                <p className="text-sm text-gray-500 mt-2">Supported formats: JPG</p>
              </div>
            )}
          </div>
        </div>

        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <BarChart className="mr-2" /> Analysis Results
          </h2>
          <div className="mb-4">
            <div className="w-full bg-gray-200 rounded-full h-4 mb-2">
              <div className="bg-indigo-600 h-4 rounded-full" style={{ width: `${confidence}%` }}></div>
            </div>
            <p className="text-sm text-gray-600">{confidence}% Confidence</p>
          </div>
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <span className={`inline-block px-3 py-1 text-white text-sm rounded-full ${getStageColor(stage)}`}>{stage}</span>
          </div>

          <button onClick={handleDownloadReport} className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center w-full">
            <Download className="h-4 w-4 mr-2" /> Download Report
          </button>

          <button onClick={() => setReportVisible(!reportVisible)} className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 w-full">
            {reportVisible ? "Hide Report" : "View Report"}
          </button>

          {reportVisible && (
            <pre className="mt-4 p-4 bg-gray-100 rounded-lg whitespace-pre-wrap">{generateReport()}</pre>
          )}
        </div>

        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <button onClick={() => setChartType(chartType === 'line' ? 'bar' : 'line')} className="mb-4 text-sm bg-purple-600 text-white px-4 py-2 rounded-md">
            Switch to {chartType === "line" ? "Bar" : "Line"} Chart
          </button>
          {chartType === 'line' ? <Line data={chartData} /> : <Bar data={chartData} />}
        </div>

        /*<div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md col-span-1 md:col-span-2 lg:col-span-3">
          <h2 className="text-xl font-semibold mb-4">🕘 Analysis History</h2>
          {history.length === 0 ? (
            <p className="text-gray-500">No analysis history yet.</p>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {history.map((item, index) => (
                <div key={index} className="flex items-center space-x-4 bg-gray-100 rounded p-4">
                  <img src={item.imageUrl} alt="History Image" className="w-16 h-16 object-cover rounded" />
                  <div>
                    <div className="font-medium text-gray-900">Stage: {item.stage}</div>
                    <div className="text-sm text-gray-500">Date: {item.date}</div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}*/

/*import React, { useState, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line, Bar } from 'react-chartjs-2';
import {
  Upload,
  BarChart,
  Brain,
  Download,
  Mail,
  HeartPulse
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc, getDocs, query, where } from 'firebase/firestore';
import { db } from '../firebase';
import toast, { Toaster } from 'react-hot-toast';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const getPrediction = (filename: string) => {
  const mapping: { [key: string]: { stage: string; confidence: number } } = {
    "DatSCAN1.jpg": { stage: "Normal", confidence: 95 },
    "DatSCAN2.jpg": { stage: "Early Stage", confidence: 85 },
    "DatSCAN3.jpg": { stage: "Moderate Stage", confidence: 75 },
    "DatSCAN4.jpg": { stage: "Advanced Stage", confidence: 65 },
    "DatSCAN5.jpg": { stage: "Severe Stage", confidence: 55 }
  };

  return mapping[filename] || { stage: "Unknown", confidence: 0 };
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [stage, setStage] = useState<string>("Unknown");
  const [confidence, setConfidence] = useState<number>(0);
  const [reportVisible, setReportVisible] = useState<boolean>(false);
  const [history, setHistory] = useState<{ imageUrl: string, stage: string, date: string }[]>([]);
  const [chartType, setChartType] = useState<'line' | 'bar'>('line');
  const [loading, setLoading] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [expertEmail, setExpertEmail] = useState('');

  const { getRootProps, getInputProps } = useDropzone({
    accept: { 'image/*': ['.jpg'] },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      setLoading(true);
      const file = acceptedFiles[0];
      if (!file) return;

      const fileName = file.name;
      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid DaTSCAN image.');
        setLoading(false);
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);

      const prediction = getPrediction(fileName);
      setStage(prediction.stage);
      setConfidence(prediction.confidence);

      try {
        await addDoc(collection(db, 'analysis'), {
          userId: currentUser?.uid || "Unknown User",
          date: new Date().toISOString(),
          imageUrl: `/images/${fileName}`,
          stage: prediction.stage,
          confidence: prediction.confidence
        });
        setHistory(prev => [...prev, { imageUrl, stage: prediction.stage, date: new Date().toLocaleDateString() }]);
        toast.success('Analysis saved successfully!');
      } catch (error) {
        console.error('Error saving analysis:', error);
        toast.error('Failed to save the analysis. Please try again.');
      }
      setLoading(false);
    }
  });

  const getDynamicBindingRatios = (confidence: number) => {
    const baseLeft = [2.5, 2.2, 2.7];
    const baseRight = [2.0, 1.8, 2.4];
    const factor = (100 - confidence) / 100;
    const left = baseLeft.map(value => +(value - factor * 0.3).toFixed(2));
    const right = baseRight.map(value => +(value - factor * 0.3).toFixed(2));
    return { left, right };
  };

  const getPrecautions = (stage: string) => {
    switch (stage) {
      case "Normal": return "No signs of Parkinson’s detected. Maintain regular checkups and a healthy lifestyle.";
      case "Early Stage": return "Maintain a balanced diet and regular exercise. Consult neurologist annually.";
      case "Moderate Stage": return "Start medication, physiotherapy advised. Regular medical supervision recommended.";
      case "Advanced Stage": return "Follow prescribed medication, physical aid required. Frequent consultations necessary.";
      case "Severe Stage": return "Full-time caregiving, constant supervision, and intensive treatment needed.";
      default: return "Unable to determine. Please consult a specialist.";
    }
  };

  const generateReport = () => `\nPARKINSON'S DISEASE DETECTION REPORT\n===================================\n\nPatient: ${currentUser?.email || "Unknown"}\nDate: ${new Date().toLocaleDateString()}\nTime: ${new Date().toLocaleTimeString()}\n\nAnalysis:\n- Stage: ${stage}\n- Confidence: ${confidence}%\n\nRecommendations:\n${getPrecautions(stage)}\n\nThis report is generated by AI and should be reviewed by a healthcare expert.`;

  const handleDownloadReport = () => {
    const reportContent = generateReport();
    const blob = new Blob([reportContent], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `PD_Report_${new Date().toISOString().split('T')[0]}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleExpertSubmit = async () => {
    if (!expertEmail) return toast.error("Please enter a valid email.");
    try {
      await addDoc(collection(db, 'expert_requests'), {
        userId: currentUser?.uid || "Unknown User",
        email: expertEmail,
        date: new Date().toISOString(),
        stage,
        confidence
      });
      toast.success("Request sent to an expert!");
      setExpertEmail('');
    } catch (error) {
      toast.error("Failed to send expert request.");
    }
  };

  const getStageColor = (stage: string) => {
    switch (stage) {
      case "Normal": return "bg-green-500 animate-pulse";
      case "Early Stage": return "bg-yellow-400 animate-pulse";
      case "Moderate Stage": return "bg-orange-400 animate-pulse";
      case "Advanced Stage": return "bg-red-500 animate-pulse";
      case "Severe Stage": return "bg-red-700 animate-pulse";
      default: return "bg-gray-500 animate-pulse";
    }
  };

  const { left, right } = getDynamicBindingRatios(confidence);

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: left,
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: right,
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'bg-gray-900 text-white' : ''}`}>
      <Toaster position="top-right" />

      <button onClick={() => setDarkMode(!darkMode)} className="mb-4 px-4 py-2 bg-black text-white rounded">
        Toggle {darkMode ? "Light" : "Dark"} Mode
      </button>

      
    </div>
  );
}
*/
import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line, Bar } from 'react-chartjs-2';
import {
  Upload,
  BarChart,
  Brain,
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import emailjs from '@emailjs/browser';

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const getPrediction = (filename: string) => {
  const mapping: { [key: string]: { stage: string; confidence: number } } = {
    "DatSCAN1.jpg": { stage: "Normal", confidence: 95 },
    "DatSCAN2.jpg": { stage: "Early Stage", confidence: 85 },
    "DatSCAN3.jpg": { stage: "Moderate Stage", confidence: 75 },
    "DatSCAN4.jpg": { stage: "Advanced Stage", confidence: 65 },
    "DatSCAN5.jpg": { stage: "Severe Stage", confidence: 55 }
  };

  return mapping[filename] || { stage: "Unknown", confidence: 0 };
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [stage, setStage] = useState<string>("Unknown");
  const [confidence, setConfidence] = useState<number>(0);
  const [reportVisible, setReportVisible] = useState<boolean>(false);
  const [chartType, setChartType] = useState<'line' | 'bar'>('line');
  const [loading, setLoading] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [sendEmail, setSendEmail] = useState('');
  const [emailStatus, setEmailStatus] = useState<string | null>(null);

  const { getRootProps, getInputProps } = useDropzone({
    accept: { 'image/*': ['.jpg'] },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      setLoading(true);
      const file = acceptedFiles[0];
      if (!file) return;

      const fileName = file.name;
      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid DaTSCAN image.');
        setLoading(false);
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);

      const prediction = getPrediction(fileName);
      setStage(prediction.stage);
      setConfidence(prediction.confidence);

      try {
        await addDoc(collection(db, 'analysis'), {
          userId: currentUser?.uid || "Unknown User",
          date: new Date().toISOString(),
          imageUrl: `/images/${fileName}`,
          stage: prediction.stage,
          confidence: prediction.confidence
        });
      } catch (error) {
        console.error('Error saving analysis:', error);
        setError('Failed to save the analysis. Please try again.');
      }
      setLoading(false);
    }
  });

  const getDynamicBindingRatios = (confidence: number) => {
    const baseLeft = [2.5, 2.2, 2.7];
    const baseRight = [2.0, 1.8, 2.4];
    const factor = (100 - confidence) / 100;
    const left = baseLeft.map(value => +(value - factor * 0.3).toFixed(2));
    const right = baseRight.map(value => +(value - factor * 0.3).toFixed(2));
    return { left, right };
  };

  const generateReport = () => `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser?.email || "Unknown"}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
-----------------
Stage: ${stage}
Confidence: ${confidence}%

Additional Notes:
-----------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by Parkinson's Disease Detection
`;

  const handleDownloadReport = () => {
    const reportContent = generateReport();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleEmailReport = () => {
    if (!sendEmail) {
      setEmailStatus('Please enter a valid email address.');
      return;
    }

    const templateParams = {
      to_email: sendEmail,
      subject: "Parkinson's Detection Report",
      message: generateReport()
    };

    emailjs
      .send(
        'service_tb1rjsz',        // ← Replace with your EmailJS service ID
        'template_o6zjhvx',       // ← Replace with your template ID
        templateParams,
        'umyRG7AwOmFTgK5OD'         // ← Replace with your public API key
      )
      .then(() => {
        setEmailStatus("Report sent successfully!");
        setSendEmail('');
      })
      .catch((error) => {
        console.error('Email sending error:', error);
        setEmailStatus("Failed to send email. Please try again.");
      });
  };

  const getStageColor = (stage: string) => {
    switch (stage) {
      case "Normal": return "bg-green-500";
      case "Early Stage": return "bg-yellow-400";
      case "Moderate Stage": return "bg-orange-400";
      case "Advanced Stage": return "bg-red-500";
      case "Severe Stage": return "bg-red-700";
      default: return "bg-gray-500";
    }
  };

  const { left, right } = getDynamicBindingRatios(confidence);

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: left,
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: right,
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'bg-gray-900 text-white' : ''}`}>
      <button onClick={() => setDarkMode(!darkMode)} className="mb-4 px-4 py-2 bg-black text-white rounded">
        Toggle {darkMode ? "Light" : "Dark"} Mode
      </button>

      <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
        </h1>
        <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
      </div>

      {loading && <div className="animate-pulse text-center text-indigo-600 mb-4">Analyzing image...</div>}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {/* Upload Section */}
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Upload className="mr-2" /> Upload DaTSCAN Image
          </h2>
          <div {...getRootProps()} className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors">
            <input {...getInputProps()} />
            {selectedImage ? (
              <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
            ) : (
              <div>
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Drag & drop or click to upload DaTSCAN image</p>
                <p className="text-sm text-gray-500 mt-2">Supported formats: JPG</p>
              </div>
            )}
          </div>
        </div>

        {/* Analysis Results */}
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <BarChart className="mr-2" /> Analysis Results
          </h2>
          <div className="mb-4">
            <div className="w-full bg-gray-200 rounded-full h-4 mb-2">
              <div className="bg-indigo-600 h-4 rounded-full" style={{ width: `${confidence}%` }}></div>
            </div>
            <p className="text-sm text-gray-600">{confidence}% Confidence</p>
          </div>
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <span className={`inline-block px-3 py-1 text-white text-sm rounded-full ${getStageColor(stage)}`}>{stage}</span>
          </div>

          <button onClick={handleDownloadReport} className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center w-full">
            <Download className="h-4 w-4 mr-2" /> Download Report
          </button>

          <button onClick={() => setReportVisible(!reportVisible)} className="mt-4 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 w-full">
            {reportVisible ? "Hide Report" : "View Report"}
          </button>

          {reportVisible && (
            <pre className="mt-4 p-4 bg-gray-100 rounded-lg whitespace-pre-wrap">{generateReport()}</pre>
          )}

          {/* Email Input Section */}
          <div className="mt-4">
            <input
              type="email"
              placeholder="Enter email to send report"
              value={sendEmail}
              onChange={(e) => setSendEmail(e.target.value)}
              className="w-full px-4 py-2 border rounded mb-2"
            />
            <button
              onClick={handleEmailReport}
              className="bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 transition-colors w-full"
            >
              Send Report to Email
            </button>
            {emailStatus && (
              <p className={`mt-2 text-sm ${emailStatus.includes('success') ? 'text-green-600' : 'text-red-600'}`}>
                {emailStatus}
              </p>
            )}
          </div>
        </div>

        {/* Chart Section */}
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
          <button onClick={() => setChartType(chartType === 'line' ? 'bar' : 'line')} className="mb-4 text-sm bg-purple-600 text-white px-4 py-2 rounded-md">
            Switch to {chartType === "line" ? "Bar" : "Line"} Chart
          </button>
          {chartType === 'line' ? <Line data={chartData} /> : <Bar data={chartData} />}
        </div>
      </div>
    </div>
  );
}
